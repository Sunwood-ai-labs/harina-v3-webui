services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: receipt_postgres
    environment:
      POSTGRES_DB: receipt_db
      POSTGRES_USER: receipt_user
      POSTGRES_PASSWORD: receipt_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/migration_add_image_data.sql:/docker-entrypoint-initdb.d/02-migration.sql
    ports:
      - "5436:5432"
    networks:
      - receipt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U receipt_user -d receipt_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HARINA CLI Server
  harina:
    build:
      context: ./harina
      dockerfile: Dockerfile
    container_name: receipt_harina
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8001:8000"
    networks:
      - receipt_network
    restart: unless-stopped

  # Next.js App (Frontend + API)
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: receipt_app
    environment:
      - DATABASE_URL=postgresql://receipt_user:receipt_password@postgres:5432/receipt_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=receipt_db
      - POSTGRES_USER=receipt_user
      - POSTGRES_PASSWORD=receipt_password
      - HARINA_API_URL=http://harina:8000
      - NEXT_PUBLIC_API_URL=https://localhost
    ports:
      - "3010:3000"
    volumes:
      - ./app/public/uploads:/app/public/uploads
        
    depends_on:
      postgres:
        condition: service_healthy
      harina:
        condition: service_started
    networks:
      - receipt_network
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    container_name: receipt_nginx
    depends_on:
      app:
        condition: service_started
    ports:
      - "80:80"
      - "4483:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - receipt_network
    restart: unless-stopped

  discord-bot:
    build:
      context: ./discord-bot
      dockerfile: Dockerfile
    container_name: receipt_discord_bot
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_ALLOWED_CHANNEL_IDS=${DISCORD_ALLOWED_CHANNEL_IDS:-}
      - RECEIPT_API_URL=http://app:3000/api/process-receipt
      - RECEIPT_MODEL=${DISCORD_RECEIPT_MODEL:-gemini}
      - RECEIPT_UPLOADER=${DISCORD_RECEIPT_UPLOADER:-discord}
      - DISCORD_MAX_FILE_MB=${DISCORD_MAX_FILE_MB:-15}
      - DISCORD_CHANNEL_UPLOADERS=${DISCORD_CHANNEL_UPLOADERS:-}
      - DISCORD_RECEIPT_BASE_URL=${DISCORD_RECEIPT_BASE_URL:-https://localhost}
    depends_on:
      app:
        condition: service_started
    networks:
      - receipt_network
    restart: unless-stopped

  # db-ui アプリケーション（データベース管理UI）
  db-ui:
    image: ghcr.io/sunwood-ai-labs/db-ui:1.1
    container_name: receipt_db_ui
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: receipt_user
      POSTGRES_PASSWORD: receipt_password
      POSTGRES_DB: receipt_db
      POSTGRES_PORT: 5432
    ports:
      - "3011:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - receipt_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  receipt_network:
    driver: bridge
